"use client";

import { useMutation } from "@tanstack/react-query";
import { toast } from "sonner";

// Create a function to summarize text using Groq API (preferred) or DeepSeek API
export function useSummarize() {
  const summarizeMutation = useMutation({
    mutationFn: async (text: string) => {
      try {
        // Try Groq API first (with or without API key)
        const groqApiKey = process.env.NEXT_PUBLIC_GROQ_API_KEY;
        
        try {
          console.log("Attempting to summarize with Groq API");
          const summary = await summarizeWithGroq(text, groqApiKey || null);
          if (summary) {
            return summary;
          }
          console.log("Groq API failed, trying alternatives");
        } catch (error) {
          console.error("Error with Groq API:", error);
          console.log("Groq API failed, trying alternatives");
        }
        
        // Fallback to DeepSeek if Groq failed
        const deepseekApiKey = process.env.NEXT_PUBLIC_DEEPSEEK_API_KEY;
        if (deepseekApiKey) {
          try {
            console.log("Attempting to summarize with DeepSeek API");
            const summary = await summarizeWithDeepSeek(text, deepseekApiKey);
            if (summary) {
              return summary;
            }
          } catch (error) {
            console.error("Error with DeepSeek API:", error);
          }
        }
        
        // For development without any working API, return a mock summary
        console.warn("All APIs failed, using mock summary");
        return mockSummarize(text);
      } catch (error) {
        console.error("Error summarizing text:", error);
        // Fallback to mock summary if all APIs fail
        return mockSummarize(text);
      }
    },
    onError: (error: any) => {
      toast.error(error.message || "Failed to summarize note");
    },
  });

  return {
    summarize: summarizeMutation.mutate,
    isLoading: summarizeMutation.isPending,
    summary: summarizeMutation.data,
  };
}

// Function to summarize text using Groq API with fetch
// Can work with or without an API key (using public endpoint)
async function summarizeWithGroq(
  text: string,
  apiKey: string | null
): Promise<string | null> {
  try {
    // Prepare headers - add Authorization only if API key is provided
    const headers: Record<string, string> = {
      "Content-Type": "application/json",
    };
    
    if (apiKey) {
      headers["Authorization"] = `Bearer ${apiKey}`;
    }
    
    // Use the public endpoint if no API key is provided
    const endpoint = apiKey 
      ? "https://api.groq.com/openai/v1/chat/completions"
      : "https://api.groq.com/openai/v1/chat/completions"; // Same endpoint for now, but could be different in the future
    
    const response = await fetch(endpoint, {
      method: "POST",
      headers,
      body: JSON.stringify({
        model: "llama3-8b-8192",
        messages: [
          {
            role: "system",
            content:
              "You are an AI assistant that summarizes text. Provide a concise summary in 2-3 sentences.",
          },
          {
            role: "user",
            content: `Summarize the following text:\n\n${text}`,
          },
        ],
        temperature: 0.5,
        max_tokens: 200,
      }),
    });

    if (!response.ok) {
      console.error(`Groq API error: ${response.status} ${response.statusText}`);
      
      // Try to get more details from the response
      try {
        const errorData = await response.json();
        console.error("Groq API error details:", errorData);
      } catch (e) {
        // If we can't parse the response, just continue
      }
      
      return null;
    }

    const data = await response.json();
    return data.choices[0]?.message?.content || "Failed to generate summary";
  } catch (error) {
    console.error("Error in Groq API call:", error);
    return null;
  }
}

// Function to summarize text using DeepSeek API
async function summarizeWithDeepSeek(
  text: string,
  apiKey: string
): Promise<string | null> {
  try {
    const response = await fetch("https://api.deepseek.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "deepseek-chat",
        messages: [
          {
            role: "system",
            content:
              "You are an intelligent assistant specialized in summarizing text. Create concise, insightful summaries that capture the key points and main ideas. Your summaries should be well-structured, clear, and highlight the most important information.",
          },
          {
            role: "user",
            content: `Please summarize the following text in 2-3 sentences, focusing on the main ideas and key points:\n\n${text}`,
          },
        ],
        temperature: 0.3,
        max_tokens: 300,
      }),
    });

    if (!response.ok) {
      console.error(`DeepSeek API error: ${response.status} ${response.statusText}`);
      
      // If we get a 402 Payment Required error, it means the API key might be valid
      // but there are no credits available or the account has billing issues
      if (response.status === 402) {
        toast.error("DeepSeek API requires payment configuration or has run out of credits.");
      }
      
      return null;
    }

    const data = await response.json();
    return data.choices[0]?.message?.content || "Failed to generate summary";
  } catch (error) {
    console.error("Error in DeepSeek API call:", error);
    return null;
  }
}

// Mock summarization function for development without API key
function mockSummarize(text: string): string {
  // Simple algorithm to extract first sentence and add a generic summary statement
  const firstSentence =
    text.split(/[.!?]/).filter((s) => s.trim().length > 0)[0] || "";
  const wordCount = text.split(/\s+/).length;

  return `This note contains ${wordCount} words. ${firstSentence.trim()}. The note covers key information that has been condensed in this summary.`;
}
